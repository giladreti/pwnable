#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 9008
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './path/to/binary'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 9008)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

import re
from functools import reduce

COIN_WEIGHT = 10

io = start()

def recv_regex(io: tube, regex: bytes) -> re.Match:
    return re.match(regex, io.recvline_regex(regex))

def encode_group(g: list[int]) -> str:
    return ' '.join(str(x) for x in g)

def parse_result(result: bytes) -> list[int]:
    return [int(x) for x in result.split(b"-")]

def do_round(io: tube):
    N, C = recv_regex(io, b"N=(\d+) C=(\d+)").groups()

    solve(io, int(N), int(C))

def solve(io: tube, N: int, C: int):
    query = "-".join(" ".join(str(x) for x in range(N) if x & (1 << i)) for i in range(C))

    io.sendline(query.encode())

    result = parse_result(io.recvline())

    guess = reduce(operator.or_, (1 << i for (i, x) in enumerate(result) if x % COIN_WEIGHT != 0), 0)

    io.sendline(str(guess).encode())

    assert io.recvline().startswith(b"Correct!")

io.recvline_contains(b"Ready? starting in 3 sec ...")

with log.progress('solving challenge...') as p:
    for i in range(100):
        p.status("round %i" % i)
        do_round(io)

io.recvuntil(b"Congratz! get your flag\n")

success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip())}'")